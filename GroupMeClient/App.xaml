<Application x:Class="GroupMeClient.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:Controls="http://metro.mahapps.com/winfx/xaml/controls"
             xmlns:views="clr-namespace:GroupMeClient.Views"
             xmlns:vm="clr-namespace:GroupMeClient.ViewModels"
             xmlns:ctrlviews="clr-namespace:GroupMeClient.Views.Controls"
             xmlns:ctrlvm="clr-namespace:GroupMeClient.ViewModels.Controls"
             xmlns:attachviews="clr-namespace:GroupMeClient.Views.Controls.Attachments"
             xmlns:attachvm="clr-namespace:GroupMeClient.ViewModels.Controls.Attachments"
             StartupUri="MainWindow.xaml"
             mc:Ignorable="d">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Colors.xaml" />

                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/Blue.xaml" />

                <ResourceDictionary Source="pack://application:,,,/ToastNotifications.Messages;component/Themes/Default.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <Style TargetType="{x:Type Controls:WindowButtonCommands}" BasedOn="{StaticResource MahApps.Metro.Styles.WindowButtonCommands.Win10}" />

            <!--
            We define the data templates here so we can apply them across the
            entire application.
            
            The data template just says that if our data type is of a particular
            view-model type, then render the appropriate view.  The framework
            takes care of this dynamically.  Note that the DataContext for
            the underlying view is already set at this point, so the
            view (UserControl), doesn't need to have it's DataContext set
            directly.
        -->
            <DataTemplate DataType="{x:Type vm:ChatsViewModel}">
                <views:ChatsView />
            </DataTemplate>
            <DataTemplate DataType="{x:Type vm:SecondViewModel}">
                <views:SecondView />
            </DataTemplate>
            <DataTemplate DataType="{x:Type vm:SettingsViewModel}">
                <views:SettingsView />
            </DataTemplate>

            <DataTemplate DataType="{x:Type ctrlvm:AvatarControlViewModel}">
                <ctrlviews:AvatarControl />
            </DataTemplate>
            <DataTemplate DataType="{x:Type ctrlvm:GroupControlViewModel}">
                <ctrlviews:GroupControl />
            </DataTemplate>
            <DataTemplate DataType="{x:Type ctrlvm:GroupContentsControlViewModel}">
                <ctrlviews:GroupContentsControl />
            </DataTemplate>
            <DataTemplate DataType="{x:Type ctrlvm:MessageControlViewModel}">
                <ctrlviews:MessageControl />
            </DataTemplate>
            <DataTemplate DataType="{x:Type ctrlvm:InlineTimestampControlViewModel}">
                <ctrlviews:InlineTimestampControl />
            </DataTemplate>

            <DataTemplate DataType="{x:Type attachvm:GenericLinkAttachmentControlViewModel}">
                <attachviews:GenericLinkAttachmentControl />
            </DataTemplate>
            <DataTemplate DataType="{x:Type attachvm:TwitterAttachmentControlViewModel}">
                <attachviews:TwitterAttachmentControl />
            </DataTemplate>
            <DataTemplate DataType="{x:Type attachvm:VideoAttachmentControlViewModel}">
                <attachviews:VideoAttachmentControl />
            </DataTemplate>
            <DataTemplate DataType="{x:Type attachvm:ImageLinkAttachmentControlViewModel}">
                <attachviews:ImageLinkAttachmentControl />
            </DataTemplate>

            <DataTemplate DataType="{x:Type ctrlvm:SendImageControlViewModel}">
                <ctrlviews:SendImageControl />
            </DataTemplate>


            <!-- Adapted from https://stackoverflow.com/questions/10969292/apple-style-scrollbar-wpf-->
            <!--Scrollbar Thumbs-->
            <Style x:Key="ScrollThumbs" TargetType="{x:Type Thumb}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Thumb}">
                            <Grid x:Name="Grid">
                                <Rectangle HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" Fill="Transparent" />
                                <Border x:Name="Rectangle1" CornerRadius="5" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto"  Background="{TemplateBinding Background}" />
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="Tag" Value="Horizontal">
                                    <Setter TargetName="Rectangle1" Property="Width" Value="Auto" />
                                    <Setter TargetName="Rectangle1" Property="Height" Value="7" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--ScrollBars-->
            <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
                <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
                <Setter Property="Foreground" Value="#8C8C8C" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Width" Value="8" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid x:Name="GridRoot" Width="8" Background="{TemplateBinding Background}">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="0.00001*" />
                                </Grid.RowDefinitions>

                                <Track x:Name="PART_Track" Grid.Row="0" IsDirectionReversed="true" Focusable="false">
                                    <Track.Thumb>
                                        <Thumb x:Name="Thumb" Background="{TemplateBinding Foreground}" Style="{DynamicResource ScrollThumbs}" />
                                    </Track.Thumb>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton x:Name="PageUp" Command="ScrollBar.PageDownCommand" Opacity="0" Focusable="false" />
                                    </Track.IncreaseRepeatButton>
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton x:Name="PageDown" Command="ScrollBar.PageUpCommand" Opacity="0" Focusable="false" />
                                    </Track.DecreaseRepeatButton>
                                </Track>
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger SourceName="Thumb" Property="IsMouseOver" Value="true">
                                    <Setter Value="{DynamicResource ButtonSelectBrush}" TargetName="Thumb" Property="Background" />
                                </Trigger>
                                <Trigger SourceName="Thumb" Property="IsDragging" Value="true">
                                    <Setter Value="{DynamicResource DarkBrush}" TargetName="Thumb" Property="Background" />
                                </Trigger>

                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter TargetName="Thumb" Property="Visibility" Value="Collapsed" />
                                </Trigger>
                                <Trigger Property="Orientation" Value="Horizontal">
                                    <Setter TargetName="GridRoot" Property="LayoutTransform">
                                        <Setter.Value>
                                            <RotateTransform Angle="-90" />
                                        </Setter.Value>
                                    </Setter>
                                    <Setter TargetName="PART_Track" Property="LayoutTransform">
                                        <Setter.Value>
                                            <RotateTransform Angle="-90" />
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="Width" Value="Auto" />
                                    <Setter Property="Height" Value="8" />
                                    <Setter TargetName="Thumb" Property="Tag" Value="Horizontal" />
                                    <Setter TargetName="PageDown" Property="Command" Value="ScrollBar.PageLeftCommand" />
                                    <Setter TargetName="PageUp" Property="Command" Value="ScrollBar.PageRightCommand" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </ResourceDictionary>
    </Application.Resources>
    
    
</Application>
