// <auto-generated/>
// Adapted from Win32 API. Named must match native C++ naming,
// and should not be refactored

using System;
using System.Runtime.InteropServices;

namespace GroupMeClient.Utilities.DirectManipulation
{
    public class MouseNative
    {
        public const int WM_POINTERDOWN = 0x0246;
        public const int DM_POINTERHITTEST = 0x0250;
        public const int WM_SIZE = 0x0005;

        public static readonly IntPtr SIZE_MAXHIDE = new IntPtr(4);
        public static readonly IntPtr SIZE_MINIMIZED = new IntPtr(1);

        public static uint GetPointerId(IntPtr wParam) => (uint)(unchecked((int)wParam.ToInt64()) & 0xFFFF);

        [DllImport("user32.dll", EntryPoint = "GetPointerInfo", SetLastError = true)]
        internal static extern bool GetPointerInfo([In] uint pointerId, [In, Out] ref POINTER_INFO pointerInfo);

        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
        internal struct POINTER_INFO
        {
            internal POINTER_INPUT_TYPE pointerType;
            internal uint pointerId;
            internal uint frameId;
            internal POINTER_FLAGS pointerFlags;
            internal IntPtr sourceDevice;
            internal IntPtr hwndTarget;
            internal POINT ptPixelLocation;
            internal POINT ptHimetricLocation;
            internal POINT ptPixelLocationRaw;
            internal POINT ptHimetricLocationRaw;
            internal uint dwTime;
            internal uint historyCount;
            internal int inputData;
            internal uint dwKeyStates;
            internal ulong PerformanceCount;
            internal POINTER_BUTTON_CHANGE_TYPE ButtonChangeType;
        }

        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
        internal struct POINT
        {
            internal int X;
            internal int Y;
        }

        internal enum POINTER_INPUT_TYPE : uint
        {
            PT_POINTER = 0x00000001,
            PT_TOUCH = 0x00000002,
            PT_PEN = 0x00000003,
            PT_MOUSE = 0x00000004,
            PT_TOUCHPAD = 0x00000005
        }

        [Flags]
        internal enum POINTER_FLAGS : uint
        {
            POINTER_FLAG_NONE = 0x00000000,
            POINTER_FLAG_NEW = 0x00000001,
            POINTER_FLAG_INRANGE = 0x00000002,
            POINTER_FLAG_INCONTACT = 0x00000004,
            POINTER_FLAG_FIRSTBUTTON = 0x00000010,
            POINTER_FLAG_SECONDBUTTON = 0x00000020,
            POINTER_FLAG_THIRDBUTTON = 0x00000040,
            POINTER_FLAG_FOURTHBUTTON = 0x00000080,
            POINTER_FLAG_FIFTHBUTTON = 0x00000100,
            POINTER_FLAG_PRIMARY = 0x00002000,
            POINTER_FLAG_CONFIDENCE = 0x000004000,
            POINTER_FLAG_CANCELED = 0x000008000,
            POINTER_FLAG_DOWN = 0x00010000,
            POINTER_FLAG_UPDATE = 0x00020000,
            POINTER_FLAG_UP = 0x00040000,
            POINTER_FLAG_WHEEL = 0x00080000,
            POINTER_FLAG_HWHEEL = 0x00100000,
            POINTER_FLAG_CAPTURECHANGED = 0x00200000,
            POINTER_FLAG_HASTRANSFORM = 0x00400000,
        }

        internal enum POINTER_BUTTON_CHANGE_TYPE : uint
        {
            POINTER_CHANGE_NONE,
            POINTER_CHANGE_FIRSTBUTTON_DOWN,
            POINTER_CHANGE_FIRSTBUTTON_UP,
            POINTER_CHANGE_SECONDBUTTON_DOWN,
            POINTER_CHANGE_SECONDBUTTON_UP,
            POINTER_CHANGE_THIRDBUTTON_DOWN,
            POINTER_CHANGE_THIRDBUTTON_UP,
            POINTER_CHANGE_FOURTHBUTTON_DOWN,
            POINTER_CHANGE_FOURTHBUTTON_UP,
            POINTER_CHANGE_FIFTHBUTTON_DOWN,
            POINTER_CHANGE_FIFTHBUTTON_UP
        }
    }
}
